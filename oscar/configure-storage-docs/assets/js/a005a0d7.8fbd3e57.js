"use strict";(self.webpackChunksuborbital_docs=self.webpackChunksuborbital_docs||[]).push([[3427],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return m}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=o.createContext({}),u=function(e){var n=o.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},s=function(e){var n=u(e.components);return o.createElement(i.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(t),m=r,g=p["".concat(i,".").concat(m)]||p[m]||d[m]||a;return t?o.createElement(g,c(c({ref:n},s),{},{components:t})):o.createElement(g,c({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,c=new Array(a);c[0]=p;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,c[1]=l;for(var u=2;u<a;u++)c[u]=t[u];return o.createElement.apply(null,c)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},533:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return d}});var o=t(7462),r=t(3366),a=(t(7294),t(3905)),c=["components"],l={},i="Configure Storage",u={unversionedId:"compute/cloud-deployment/configure-storage",id:"compute/cloud-deployment/configure-storage",title:"Configure Storage",description:"By default, Compute will store compiled functions and function source code on the local storage in your Kubernetes cluster. For greater scalability, Compute can be configured to store artifacts in cloud-based object storage like Amazon S3 or Google Cloud Storage.",source:"@site/docs/compute/cloud-deployment/configure-storage.md",sourceDirName:"compute/cloud-deployment",slug:"/compute/cloud-deployment/configure-storage",permalink:"/docs/oscar/configure-storage-docs/compute/cloud-deployment/configure-storage",editUrl:"https://github.com/suborbital/docs/edit/main/website/docs/compute/cloud-deployment/configure-storage.md",tags:[],version:"current",lastUpdatedAt:1653587375,formattedLastUpdatedAt:"5/26/2022",frontMatter:{},sidebar:"docs",previous:{title:"Configure capabilities",permalink:"/docs/oscar/configure-storage-docs/compute/cloud-deployment/configure-capabilities"},next:{title:"Deploy Compute to your cloud environment",permalink:"/docs/oscar/configure-storage-docs/compute/cloud-deployment/install-compute-in-your-cloud-environment"}},s={},d=[{value:"Kubernetes deployment",id:"kubernetes-deployment",level:2},{value:"Local docker-compose deployment",id:"local-docker-compose-deployment",level:2},{value:"Authentication",id:"authentication",level:2},{value:"Amazon S3",id:"amazon-s3",level:3},{value:"Google Cloud Storage",id:"google-cloud-storage",level:3},{value:"Kubernetes deployment",id:"kubernetes-deployment-1",level:4}],p={toc:d};function m(e){var n=e.components,t=(0,r.Z)(e,c);return(0,a.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"configure-storage"},"Configure Storage"),(0,a.kt)("p",null,"By default, Compute will store compiled functions and function source code on the local storage in your Kubernetes cluster. For greater scalability, Compute can be configured to store artifacts in cloud-based object storage like Amazon S3 or Google Cloud Storage."),(0,a.kt)("h2",{id:"kubernetes-deployment"},"Kubernetes deployment"),(0,a.kt)("p",null,"To configure a storage bucket, provide the ",(0,a.kt)("inlineCode",{parentName:"p"},"SCC_STORAGE_PATH")," environment variable to both the control plane and builder in ",(0,a.kt)("inlineCode",{parentName:"p"},".suborbital/scc-controlplane-deployment.yaml")," under the ",(0,a.kt)("inlineCode",{parentName:"p"},"controlplane")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"builder")," containers:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'containers:\n  - name: controlplane\n    image: suborbital/scc-control-plane:v0.3.0\n    command: ["controlplane"]\n\n    ports:\n      - containerPort: 8081\n\n    env:\n      - name: SCC_HTTP_PORT\n        value: "8081"\n\n      - name: SCC_STORAGE_PATH\n        value: "s3://your-storage-bucket"\n\n  - name: builder\n    image: suborbital/scc-builder:v0.3.0\n    command: ["builder"]\n\n    ports:\n      - containerPort: 8080\n      - containerPort: 8443\n\n    env:\n      - name: SCC_DOMAIN\n        value: "example.dom"\n\n      - name: SCC_STORAGE_PATH\n        value: "s3://your-storage-bucket"\n')),(0,a.kt)("h2",{id:"local-docker-compose-deployment"},"Local docker-compose deployment"),(0,a.kt)("p",null,"To configure a storage bucket, provide the ",(0,a.kt)("inlineCode",{parentName:"p"},"SCC_STORAGE_PATH")," environment variable to both the control plane and builder in ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," under the ",(0,a.kt)("inlineCode",{parentName:"p"},"scc-control-plane")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"scc-builder")," services:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'services:\n  scc-control-plane:\n    image: suborbital/scc-control-plane:v0.3.0\n    command: controlplane\n    environment:\n      SCC_LOG_LEVEL: info\n      SCC_STORAGE_PATH: "s3://your-storage-bucket"\n\n  scc-builder:\n    image: suborbital/scc-builder:v0.3.0\n    command: builder\n    environment:\n      SCC_LOG_LEVEL: info\n      SCC_STORAGE_PATH: "s3://your-storage-bucket"\n')),(0,a.kt)("h2",{id:"authentication"},"Authentication"),(0,a.kt)("p",null,"Bucket authentication varies between cloud providers."),(0,a.kt)("h3",{id:"amazon-s3"},"Amazon S3"),(0,a.kt)("p",null,"You will need to also supply the ",(0,a.kt)("inlineCode",{parentName:"p"},"AWS_ACCESS_KEY_ID"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"AWS_SECRET_ACCESS_KEY"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"AWS_SESSION_TOKEN")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"AWS_REGION")," environment variables to both the control plane and the builder. See the ",(0,a.kt)("a",{parentName:"p",href:"https://aws.github.io/aws-sdk-go-v2/docs/configuring-sdk/"},"AWS authentication documentation")," for details."),(0,a.kt)("h3",{id:"google-cloud-storage"},"Google Cloud Storage"),(0,a.kt)("p",null,"GCS expects to read a service account credentials file, so those credentials must be mounted. See the ",(0,a.kt)("a",{parentName:"p",href:"https://cloud.google.com/docs/authentication/production"},"GCP authentication documentation")," for more details."),(0,a.kt)("h4",{id:"kubernetes-deployment-1"},"Kubernetes deployment"),(0,a.kt)("p",null,"Create ",(0,a.kt)("inlineCode",{parentName:"p"},".suborbital/scc-gcs-credentials.yaml"),", providing the base64 encoded contents of your ",(0,a.kt)("inlineCode",{parentName:"p"},"service-account-file.json"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Secret\n\nmetadata:\n  namespace: suborbital\n  name: gcs-service-account-credentials\n\ntype: Opaque\ndata:\n  sa_json: <contents of running `base64 service-account-file.json`>\n")),(0,a.kt)("p",null,"Mount the secret and provide the ",(0,a.kt)("inlineCode",{parentName:"p"},"GOOGLE_APPLICATION_CREDENTIALS")," environment variable:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'containers:\n  - name: controlplane\n    image: suborbital/scc-control-plane:v0.3.0\n    command: ["controlplane"]\n\n    env:\n      - name: SCC_STORAGE_PATH\n        value: "gs://your-storage-bucket"\n      - name: GOOGLE_APPLICATION_CREDENTIALS\n        value: "/etc/gcp/sa_credentials.json"\n\n    volumeMounts:\n      - name: controlplane-config\n        mountPath: "/home/scn/config"\n        readOnly: true\n      - name: gcs-service-account-credentials-volume\n        mountPath: /etc/gcp\n        readOnly: true\n\n  - name: builder\n    image: suborbital/scc-builder:v0.3.0\n    command: ["builder"]\n\n    env:\n      - name: SCC_STORAGE_PATH\n        value: "gs://your-storage-bucket"\n      - name: GOOGLE_APPLICATION_CREDENTIALS\n        value: "/etc/gcp/sa_credentials.json"\n\n    volumeMounts:\n      - name: controlplane-config\n        mountPath: "/home/scn/config"\n        readOnly: true\n      - name: gcs-service-account-credentials-volume\n        mountPath: /etc/gcp\n        readOnly: true\n\nvolumes:\n  - name: scc-config\n    configMap:\n      name: scc-config\n  - name: gcs-service-account-credentials-volume\n    secret:\n      secretName: gcs-service-account-credentials\n      items:\n        - key: sa_json\n          path: sa_credentials.json\n')),(0,a.kt)("p",null,"Note the addition of ",(0,a.kt)("inlineCode",{parentName:"p"},"GOOGLE_APPLICATION_CREDENTIALS")," to both environments of the builder and control plane containers, the ",(0,a.kt)("inlineCode",{parentName:"p"},"gcs-service-account-credentials-volume")," volume mount to the ",(0,a.kt)("inlineCode",{parentName:"p"},"volumeMounts")," sections of both containers, as well as the declaration of the volume itself in the ",(0,a.kt)("inlineCode",{parentName:"p"},"volumes")," section."))}m.isMDXComponent=!0}}]);