"use strict";(self.webpackChunksuborbital_docs=self.webpackChunksuborbital_docs||[]).push([[7851],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=d(n),m=r,h=c["".concat(l,".").concat(m)]||c[m]||p[m]||s;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=c;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var d=2;d<s;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},566:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const s={},o="Headless Mode",i={unversionedId:"atmo/usage/headless",id:"atmo/usage/headless",title:"Headless Mode",description:"Atmo can be run 'headless' mode, which causes it to ignore the",source:"@site/docs/atmo/usage/headless.md",sourceDirName:"atmo/usage",slug:"/atmo/usage/headless",permalink:"/docs/165-shrink-websitedocsassetseditor-screenpng/atmo/usage/headless",draft:!1,editUrl:"https://github.com/suborbital/docs/edit/main/website/docs/atmo/usage/headless.md",tags:[],version:"current",lastUpdatedAt:1656622516,formattedLastUpdatedAt:"Jun 30, 2022",frontMatter:{},sidebar:"docs",previous:{title:"Error handling",permalink:"/docs/165-shrink-websitedocsassetseditor-screenpng/atmo/usage/error-handling"},next:{title:"Managing state",permalink:"/docs/165-shrink-websitedocsassetseditor-screenpng/atmo/usage/managing-state"}},l={},d=[{value:"Running in Headless mode",id:"running-in-headless-mode",level:2}],u={toc:d};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"headless-mode"},"Headless Mode"),(0,r.kt)("p",null,"Atmo can be run 'headless' mode, which causes it to ignore the\nDirective and instead make each Runnable in your application\navailable as an individual endpoint. This can be useful for a\nnumber of things such as automated testing (being able to test\neach Runnable in isolation with controlled inputs)."),(0,r.kt)("p",null,"Each function will be made available at a URI such as this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"POST /com.suborbital.test/default/get-file/v0.0.1\n")),(0,r.kt)("p",null,"The format of this URL is: ",(0,r.kt)("inlineCode",{parentName:"p"},"/[identifier]/[namespace]/[name]/[appVersion]"),".\nYour Directive defines the identifier, appVersion, the namespace and\nname of each Runnable. These are listed in the ",(0,r.kt)("inlineCode",{parentName:"p"},".runnable.yaml")," file within\neach Runnable's directory."),(0,r.kt)("p",null,"To define the inputs for the request, you can use the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Desired input"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Headless Request"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Runnable API"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Request body"),(0,r.kt)("td",{parentName:"tr",align:"left"},"POST request body"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"req::body()"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Request state"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"X-Atmo-State")," header, formatted as JSON key/value pairs"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"req::state(key)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"URL parameters ","(","such as /:name",")"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"X-Atmo-Params")," header, formatted as JSON key/value pairs"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"req::param(key)"))))),(0,r.kt)("p",null,"For example, if your Runnable expects data in the ",(0,r.kt)("inlineCode",{parentName:"p"},"user"),"\n",(0,r.kt)("a",{parentName:"p",href:"/docs/165-shrink-websitedocsassetseditor-screenpng/atmo/concepts/state"},"request state")," key, you would set the\n",(0,r.kt)("inlineCode",{parentName:"p"},"X-Atmo-State")," header as such:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'{"user": "user@suborbital.dev"}\n')),(0,r.kt)("p",null,"And if your Runnable expects to parse URL parameters such as ",(0,r.kt)("inlineCode",{parentName:"p"},"/api/:user"),",\nyou can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"X-Atmo-Params")," header in a similar fashion."),(0,r.kt)("p",null,"When running in headless mode, the unique UUID for each request will be\nreturned in the ",(0,r.kt)("inlineCode",{parentName:"p"},"X-Atmo-Requestid")," response header field."),(0,r.kt)("h2",{id:"running-in-headless-mode"},"Running in Headless mode"),(0,r.kt)("p",null,"To run Atmo in headless mode, set the ",(0,r.kt)("inlineCode",{parentName:"p"},"ATMO_HEADLESS")," env var:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"ATMO_HEADLESS=true\n")),(0,r.kt)("p",null,"In a Dockerfile, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ENV")," command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"ENV ATMO_HEADLESS=true\n")),(0,r.kt)("p",null,"Or with the Docker CLI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"docker run [...] -e ATMO_HEADLESS=true suborbital/atmo atmo\n")))}p.isMDXComponent=!0}}]);