"use strict";(self.webpackChunksuborbital_docs=self.webpackChunksuborbital_docs||[]).push([[7575],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7120:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return l}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],s={},c="Test code snippet loading",u={unversionedId:"test",id:"test",title:"Test code snippet loading",description:"The code below is being loaded directly from GitHub during buildtime.",source:"@site/docs/test.md",sourceDirName:".",slug:"/test",permalink:"/docs/flaki/29-code-examples/test",editUrl:"https://github.com/suborbital/docs/edit/main/website/docs/test.md",tags:[],version:"current",lastUpdatedAt:1648647385,formattedLastUpdatedAt:"3/30/2022",frontMatter:{}},l=[],p={toc:l};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"test-code-snippet-loading"},"Test code snippet loading"),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"The code below is being loaded directly ",(0,a.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/suborbital/reactr/main/rwasm/testdata/fetch/src/lib.rs"},"from GitHub")," during buildtime."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'/* https://raw.githubusercontent.com/suborbital/reactr/main/rwasm/testdata/fetch/src/lib.rs {__externalCodeSnippet0} */\nuse suborbital::runnable::*;\nuse suborbital::http;\nuse suborbital::util;\nuse suborbital::log;\nuse std::collections::BTreeMap;\n\nstruct Fetch{}\n\nimpl Runnable for Fetch {\n    fn run(&self, input: Vec<u8>) -> Result<Vec<u8>, RunErr> {\n        let url = util::to_string(input);\n        \n        let _ = match http::get(url.as_str(), None) {\n            Ok(res) => res,\n            Err(e) => return Err(RunErr::new(1, e.message.as_str()))\n        };\n\n        // test sending a POST request with headers and a body\n        let mut headers = BTreeMap::new();\n        headers.insert("Content-Type", "application/json");\n        headers.insert("X-ATMO-TEST", "testvalgoeshere");\n\n        let body = String::from("{\\"message\\": \\"testing the echo!\\"}").as_bytes().to_vec();\n\n        match http::post("https://postman-echo.com/post", Some(body), Some(headers)) {\n            Ok(res) => {\n                log::info(util::to_string(res.clone()).as_str());\n                Ok(res)\n            },\n            Err(e) => Err(RunErr::new(1, e.message.as_str()))\n        }\n    }\n}\n\n\n// initialize the runner, do not edit below //\nstatic RUNNABLE: &Fetch = &Fetch{};\n\n#[no_mangle]\npub extern fn _start() {\n    use_runnable(RUNNABLE);\n}\n\n')))}d.isMDXComponent=!0}}]);