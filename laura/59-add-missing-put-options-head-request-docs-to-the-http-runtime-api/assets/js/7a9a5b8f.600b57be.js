"use strict";(self.webpackChunksuborbital_docs=self.webpackChunksuborbital_docs||[]).push([[4777],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(t),m=o,h=d["".concat(u,".").concat(m)]||d[m]||p[m]||a;return t?r.createElement(h,i(i({ref:n},l),{},{components:t})):r.createElement(h,i({ref:n},l))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5779:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],s={},u="Error handling",c={unversionedId:"atmo/usage/error-handling",id:"atmo/usage/error-handling",title:"Error handling",description:"When building your Atmo app, handling errors returned from Runnables",source:"@site/docs/atmo/usage/error-handling.md",sourceDirName:"atmo/usage",slug:"/atmo/usage/error-handling",permalink:"/docs/laura/59-add-missing-put-options-head-request-docs-to-the-http-runtime-api/atmo/usage/error-handling",draft:!1,editUrl:"https://github.com/suborbital/docs/edit/main/website/docs/atmo/usage/error-handling.md",tags:[],version:"current",lastUpdatedAt:1642876873,formattedLastUpdatedAt:"1/22/2022",frontMatter:{},sidebar:"docs",previous:{title:"Authentication",permalink:"/docs/laura/59-add-missing-put-options-head-request-docs-to-the-http-runtime-api/atmo/usage/authentication"},next:{title:"Headless Mode",permalink:"/docs/laura/59-add-missing-put-options-head-request-docs-to-the-http-runtime-api/atmo/usage/headless"}},l={},p=[],d={toc:p};function m(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"error-handling"},"Error handling"),(0,a.kt)("p",null,"When building your Atmo app, handling errors returned from Runnables\nis pretty essential. When a Runnable returns an error, it contains\na ",(0,a.kt)("inlineCode",{parentName:"p"},"code")," and a ",(0,a.kt)("inlineCode",{parentName:"p"},"message"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"code")," must be a valid\n",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status"},"HTTP response status code"),".\nUsing the Directive, you can manage how your application behaves when an error is returned:"),(0,a.kt)("p",null,"The default behaviour for any error is for the handler to return."),(0,a.kt)("p",null,"Any time a Runnable returns an error, you can decide what to do with it\nusing the ",(0,a.kt)("inlineCode",{parentName:"p"},"onErr")," clause:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"- type: request\n    resource: /repo/report/*repo\n    method: GET\n    steps:\n      - fn: check-cache\n        as: report\n        onErr:\n          any: continue\n\n      - fn: send-report\n")),(0,a.kt)("p",null,"In its basic form, onErr allows you to tell Atmo to ignore any error from\na Runnable. When using ",(0,a.kt)("inlineCode",{parentName:"p"},"continue"),", the JSON of the error will be placed\ninto state, such as ",(0,a.kt)("inlineCode",{parentName:"p"},'{"code":404,"message":"not found"}')),(0,a.kt)("p",null,"To gain more control, you can choose what to do based on error codes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"- type: request\n    resource: /repo/report/*repo\n    method: GET\n    steps:\n      - fn: check-cache\n        as: report\n        onErr:\n          code:\n            404: continue\n          other: return\n\n      - fn: send-report\n")),(0,a.kt)("p",null,"Technically, any ",(0,a.kt)("inlineCode",{parentName:"p"},"return")," (such as an 'any' or 'other') can be omitted\nsince it is the default behaviour, but it can improve readability of\nyour Directive when included."),(0,a.kt)("p",null,"When defining specific error codes, you cannot use 'any', use 'other' instead.\nIf no specific codes are specified, use 'any'."),(0,a.kt)("p",null,"Whenever Atmo decides to return based on your Directive's instructions,\nthe error's JSON is returned to the caller with the status code set to the\nerror code."))}m.isMDXComponent=!0}}]);