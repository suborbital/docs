"use strict";(self.webpackChunksuborbital_docs=self.webpackChunksuborbital_docs||[]).push([[3243],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),i=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=i(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),d=i(n),m=a,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(f,s(s({ref:t},l),{},{components:n})):r.createElement(f,s({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var u={};for(var c in t)hasOwnProperty.call(t,c)&&(u[c]=t[c]);u.originalType=e,u.mdxType="string"==typeof e?e:a,s[1]=u;for(var i=2;i<o;i++)s[i]=n[i];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8708:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return u},metadata:function(){return i},toc:function(){return p}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),s=["components"],u={},c="Scheduled jobs",i={unversionedId:"atmo/usage/schedules",id:"atmo/usage/schedules",title:"Scheduled jobs",description:"You can easily define background jobs in your Directive",source:"@site/docs/atmo/usage/schedules.md",sourceDirName:"atmo/usage",slug:"/atmo/usage/schedules",permalink:"/docs/laura/128-missing-compute-langs/atmo/usage/schedules",editUrl:"https://github.com/suborbital/docs/edit/main/website/docs/atmo/usage/schedules.md",tags:[],version:"current",lastUpdatedAt:1642876873,formattedLastUpdatedAt:"1/22/2022",frontMatter:{},sidebar:"docs",previous:{title:"Managing state",permalink:"/docs/laura/128-missing-compute-langs/atmo/usage/managing-state"},next:{title:"Streams",permalink:"/docs/laura/128-missing-compute-langs/atmo/usage/streams"}},l={},p=[],d={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"scheduled-jobs"},"Scheduled jobs"),(0,o.kt)("p",null,"You can easily define background jobs in your Directive\nthat Atmo will run on a schedule. Schedules run a set of steps,\nexactly like a handler. Schedules can be set up with an\ninitial state to provide input."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"schedules:\n  - name: atmo-report\n    every:\n      hours: 1\n    state:\n      repo: suborbital/atmo\n    steps:\n      - fn: ghstars\n\n      - fn: send-report\n        with:\n          stargazers: ghstars\n")),(0,o.kt)("p",null,"As you can see, you can choose how often the job runs\nusing the ",(0,o.kt)("inlineCode",{parentName:"p"},"every")," clause. You can set seconds, minutes,\nhours, or days (and you can combine them for values such as 'every 1 hour and 15 minutes')."),(0,o.kt)("p",null,"If you need to change a Runnable's behaviour to run in a schedule,\nyou can check ",(0,o.kt)("inlineCode",{parentName:"p"},'req::method() == "SCHED"'),". This can be useful when\nusing the same Runnable for both request handlers and schedules."),(0,o.kt)("p",null,"Setting the ",(0,o.kt)("inlineCode",{parentName:"p"},"state")," clause will allow you to 'seed' the job\nwith values, and that state will update after each step,\njust as with request handlers. "),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"/docs/laura/128-missing-compute-langs/atmo/concepts/state"},"state")," for more details."),(0,o.kt)("p",null,"Any issues running schedules (such as Runnables returning errors or any failures to execute the Runnables)\nwill be logged, but nothing else."))}m.isMDXComponent=!0}}]);